# –¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –Ω–∞ Chat GPT 3.5 –¢—É—Ä–±–æ - –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ —Ç—Ä–µ–π–¥–∏–Ω–≥—É

# –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å, —á—Ç–æ–±—ã
# –±—ã—Å—Ç—Ä–µ–µ —É–∑–Ω–∞–≤–∞—Ç—å –æ
# –Ω–æ–≤—ã—Ö —É—Ä–æ–∫–∞—Ö - https://t.me/isartem_bot

# –ú–æ–π Boosty —Å
# –¥–æ—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º–∏ —Å–∫—Ä–∏–ø—Ç–∞–º–∏ –∏ –¥—Ä—É–≥–æ–π
# –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π - https://boosty.to/isartem

# pip install aiogram asyncio openai

from config import *
import logging
import openai
from aiogram import Bot, Dispatcher, executor, types

openai.api_key = OPENAI_API_KEY

# Configure logging
logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher
bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher(bot)


async def ai(prompt):
    try:
        completion = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": '–¢–µ–±—è –∑–æ–≤—É—Ç –ê—Ä—Ç–µ–º –∏ —Ç—ã —è–≤–ª—è–µ—à—å—Å—è —ç–∫—Å–ø–µ—Ä—Ç–æ–º –ø–æ —Ç–æ—Ä–≥–æ–≤–ª–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º, —Å–≤—è–∑–∞–Ω–Ω—ã–º —Å —Ç—Ä–µ–π–¥–∏–Ω–≥–æ–º –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –±–∏—Ä–∂–∞—Ö.'},
                {"role": "user", "content": prompt}
            ]
        )

        return completion.choices[0].message.content
    except:
        return None


@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –Ø —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ç–æ—Ä–≥–æ–≤–ª–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏, —á—Ç–æ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?")



@dp.message_handler()
async def echo(message: types.Message):
    answer = await ai(message.text)

    if answer != None:
        await message.reply(answer)
    else:
        await message.reply('üòû –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)